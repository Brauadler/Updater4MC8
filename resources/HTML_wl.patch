--- Message.pm  2020-02-12 18:07:42.256558938 +0100
+++ /opt/MailScanner/lib/MailScanner/Message.pm 2020-02-11 17:04:36.137277140 +0100
 
@@ -6637,6 +6635,62 @@
   $DisarmCodebaseTag = 1 if $this->{tagstoconvert} =~ /data/i;
   $DisarmIframeTag   = 1 if $this->{tagstoconvert} =~ /iframe/i;
   $DisarmWebBug      = 1 if $this->{tagstoconvert} =~ /webbug/i;
+
+  # Pascal Rolle, MailCleaner to whitelist HTML controls
+  my $wl_HTML = '/var/mailcleaner/spool/tmp/mailscanner/whitelist_HTML';
+  if ( -e $wl_HTML ) {
+       # get information for the Body From
+       my $bf_addr = '';
+       foreach my $header_line (@{$this->{headers}}) {
+               $bf_addr = $1 if ( $header_line =~ /^From:.*\s<?(.*)$/ );
+       }
+       my ($bf_user, $bf_domain) = address2userdomain($bf_addr);
+
+       # Parse the file for whitelisted addresses
+       my $is_whitelisted = 0;
+       my $addr = '';
+       open FH, '<', $wl_HTML;
+       while ($addr = <FH>) {
+               # function address2userdomain cannot apply here
+               chomp($addr);
+               $addr = lc($addr);
+               $addr =~ s/^<\s*//; # Delete leading and
+               $addr =~ s/\s*>$//; # trailing <>
+
+               my($user, $domain);
+               $user = $domain = $addr;
+
+               # Test the addresses, get out of the while as soon as we know we have a whitelisted element
+               if ($addr =~ /@/) {
+                       $user   =~ s/@[^@]*$//;
+                       $domain =~ s/^[^@]*@//;
+
+                       if ( ( ($this->{'fromuser'} eq $user) && ($this->{'fromdomain'} eq $domain) ) || ( ($bf_user eq $user) && ($bf_domain eq $domain) ) ) {
+                               $is_whitelisted = 1;
+                               last;
+                       }
+               } elsif ( ($this->{'fromdomain'} eq $addr) || ($bf_domain eq $addr) ) {
+                       $is_whitelisted = 1;
+                       last;
+               }
+       }
+       close FH;
+
+       # Apply whitelist
+       if ( $is_whitelisted ) {
+               $DisarmFormTag     = 0;
+               $DisarmScriptTag   = 0;
+               $DisarmCodebaseTag = 0;
+               $DisarmCodebaseTag = 0;
+               $DisarmIframeTag   = 0;
+               $DisarmWebBug      = 0;
+
+               # Logging
+               MailScanner::Log::NoticeLog('Message '.$this->{id}." : the address $addr is whitelisted for HTML controls", $this->{id});
+       }
+  }
+  # End of HTML controls whitelist
+
   $PhishingSubjectTag= 1
     if MailScanner::Config::Value('tagphishingsubject', $this) =~ /1/;
   #print STDERR "PhishingSubjectTag = $PhishingSubjectTag\n";
